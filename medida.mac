/*
Calcula Wab
*/

/* Carga da lib quantica e da lib de autovalores e autovetores.
*/
load("/home/furtado/.maxima/qinf.mac");
load("eigen");
load ("nchrpl") ;

/* Constantes e variaveis*/

roab:werner(p,2,0);
lamb:eivals(roab);
autoVec:eivects(roab);

P:matrix([1,0,0,-1],[0,1,0,0],[0,0,1,0],[1,0,0,1]);
P:transpose(P);
PInv:P^^(-1);
D:matrix([-(p-1)/4,0,0,0],[0,-(p-1)/4,0,0],[0,0,-(p-1)/4,0],[0,0,0,(3*p+1)/4]);
raizD:sqrt(D);
raizroab:P . raizD . PInv;

/* Produto entre Matrizes
*/

produto_matrizes([listMat]):=([produtoMatrizResultado:1],
 for i:1 thru length(listMat) do  
    produtoMatrizResultado:produtoMatrizResultado.listMat[i],
    produtoMatrizResultado
);

/* Produto Tensorial
*/

produto_tensorial([listMatTensorial]):=([produtoTensorial:matrix([1])],
for i:1 thru length(listMatTensorial) do
    produtoTensorial:tensor_product(produtoTensorial,listMatTensorial[i]),
    produtoTensorial
);

/* Calcula matriz W
*/


calcula_matriz(roab):=([resMatWab:matrix([0,0,0],[0,0,0],[0,0,0])],
for i:1 thru 3 do(
  for j:1 thru 3 do(    
  matrizW: mattrace(produto_matrizes(roab,produto_tensorial(pauli[i],ident(2)),roab,produto_tensorial(pauli[j],ident(2)))),
    resMatWab[i,j]: matrizW)),
    resMatWab
);

/*
Funcao:(sqrt(3*p+1)/4+sqrt(1-p)/4)^2-(sqrt(3*p+1)/4+sqrt(1-p)/4)^2-(sqrt(3*p+1)/4+sqrt(1-p)/4)*(sqrt(3*p+1)/4+sqrt(1-p)/4)+(sqrt(1-p)/4-sqrt(3*p+1)/4)*(sqrt(3*p+1)/4+sqrt(1-p)/4)+(1-p)/2
Funcao: 2*(sqrt(1-p))*(sqrt(3*p+1)/4+sqrt(1-p)/4))

*/